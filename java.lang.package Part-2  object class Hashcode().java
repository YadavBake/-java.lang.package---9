
										java.lang.package Part-2 || object class||Hashcode()
									 =========================================================

 
 ---------------
  2. HashCode() 
 ---------------

 -> For every object a unique number generated by JVM which is nothing but hashCode.

 -> hashCode won't reprasent address of object.

 -> JVM will use hashCode while saving objecs into hashing related datastructures like hashtable, hashMap,hashSet etc.

 -> The main advatange of saving objects based on hashCode is search opeation will become easy(The most powerfull search	
	Algorithm upto today is hashing).
	
 -> If you are giving chance to object class hashCode() method it will generates hashCode based on address of the object 
	it doesn't mean hashCode reprasents address of the object.
	
 -> Based on our requirement we can override hashCode() method in our class to generates our own hashCode.
 
 -> Overriding hashCode() method is said to be proper if and only if for every object we have to generat a unique number
	as hashCode
 
	1. 
	
	class Student 					
	{                               	Improper way  declaration			
		                                
		                                This is improper way of overriding hashCode() method because for 
		public int hashCode()           all student object we are generating same number
		{                           
			return 100;             
		}
	}
			
	2. 
	
	class Student 							proper way  declaration 
	{                                       
		public int hashCode()               This is proper way of overriding hashCode() method  because we are  
		{                                   generating a different hashCode for every Object.
			return rollno;
		}
	}		
    
          
  -----------------------	  
   toString vs hashCode	 
  -----------------------   
	  
 -> If we are giving the chance to object class toString() method it will enterly calls hashCode() method.

 -> If we are overriding toString() method then our toString() method may not call hashCode() method. 
 

 
				class Test 										class Test1 
				{                                               {
																	
					int i ;                                     	int i ;
					Test(int i)                                 	Test(int i)
					{                                           	{
						this.i=i;                               		this.i=i;
					}                                           	}
					public static void mai(String args[])       	public String toString()
					{                                           	{
						Test t1 = new Test(10);                 		return i;
						Test t2 = new Test(100);                	}
						System.out.println(t1);// Test@abfws        public static void mai(String args[])
						System.out.println(t2);// Test@fnofqo       {
					}                                           		Test t1 = new Test(10);
				}                                               		Test t2 = new Test(100);
					Object => toString()                        		System.out.println(t1);// Test@a
								|                               		System.out.println(t2);//Test@64
					Object => hashCode()			            	}
																}
				/*Object class toString Will be call            	Object => toString()
				and enterly call hashCode() method                  			|
				enterly call object class hashCode                  Test   => hashCode()
				method*/ 
	
	
    
							class Test1 
                            {
                            	
                            	int i ;
                            	Test(int i)
                            	{
	                        		this.i=i;
	                        	}
	                        	public String toString()
	                        	{
                            		return i+" ";
                            	}
								public int hashCode()
								{
									return i;
								}
                            	public static void mai(String args[])
                            	{
                            		Test t1 = new Test(10);
                            		Test t2 = new Test(100);
                            		System.out.println(t1);// 10 
                            		System.out.println(t2);// 100 
	                        	}
                            }
                            	Test => toString()
                                		